/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Apr 14 2021 10:39:10 GMT-0500 (Central Daylight Time).
 * 
 * Copied from StateMachineJoint
 */

 define(['jointjs', 'css!./styles/SimPNWidget.css'], function (joint) {
    'use strict';

    var WIDGET_CLASS = 'sim-s-m';

    function SimPNWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    SimPNWidget.prototype._initialize = function () {
        console.log(joint);
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        this._jointPN = new joint.dia.Graph;
        this._jointPaper = new joint.dia.Paper({
            el: this._el,
            width : width,
            height: height,
            model: this._jointPN,
            interactive: false
        });

        // add event calls to elements
        this._jointPaper.on('element:pointerdblclick', function(elementView) {
            const currentElement = elementView.model;
            // console.log(currentElement);
            if (self._webgmePN) {
                // console.log(self._webgmePN.id2state[currentElement.id]);
                self._setCurrentState(self._webgmePN.id2state[currentElement.id]);
            }
        });

        this._webgmePN = null;
    };

    SimPNWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Petri Net manipulating functions called from the controller
    SimPNWidget.prototype.initPetri = function (petriDescriptor) {
        const self = this;
        console.log(petriDescriptor);

        self._webgmePN = petriDescriptor;
        self._webgmePN.current = self._webgmePN.init;
        self._jointPN.clear();
        const pn = self._webgmePN;
        pn.id2state = {}; // this dictionary will connect the on-screen id to the state id
        // first add the states
        Object.keys(pn.states).forEach(stateId => {
            let vertex = null;
            if (pn.init === stateId) {
                vertex = new joint.shapes.standard.Circle({
                    position: pn.states[stateId].position,
                    size: { width: 20, height: 20 },
                    attrs: {
                        body: {
                            fill: '#333333',
                            cursor: 'pointer'
                        }
                    }
                });
            } else if (pn.states[stateId].isEnd) {
                vertex = new joint.shapes.standard.Circle({
                    position: pn.states[stateId].position,
                    size: { width: 30, height: 30 },
                    attrs: {
                        body: {
                            fill: '#999999',
                            cursor: 'pointer'
                        }
                    }
                });
            } else {
                vertex = new joint.shapes.standard.Circle({
                    position: pn.states[stateId].position,
                    size: { width: 60, height: 60 },
                    attrs: {
                        label : {
                            text: pn.states[stateId].name,
                            //event: 'element:label:pointerdown',
                            fontWeight: 'bold',
                            //cursor: 'text',
                            //style: {
                            //    userSelect: 'text'
                            //}
                        },
                        body: {
                            strokeWidth: 3,
                            cursor: 'pointer'
                        }
                    }
                });
            }
            vertex.addTo(self._jointPN);
            pn.states[stateId].joint = vertex;
            pn.id2state[vertex.id] = stateId;
        });

        // then create the links
        Object.keys(pn.states).forEach(stateId => {
            const state = pn.states[stateId];
            Object.keys(state.next).forEach(event => {
                state.jointNext = state.jointNext || {};
                const link = new joint.shapes.standard.Link({
                    source: {id: state.joint.id},
                    target: {id: pn.states[state.next[event]].joint.id},
                    attrs: {
                        line: {
                            strokeWidth: 2
                        },
                        wrapper: {
                            cursor: 'default'
                        }
                    },
                    labels: [{
                        position: {
                            distance: 0.5,
                            offset: 0,
                            args: {
                                keepGradient: true,
                                ensureLegibility: true
                            }
                        },
                        attrs: {
                            text: {
                                text: event,
                                fontWeight: 'bold'
                            }
                        }
                    }]
                });
                link.addTo(self._jointPN);
                state.jointNext[event] = link;
            })
        });

        //now refresh the visualization
        self._jointPaper.updateViews();
        self._decoratePetri();
    };

    SimPNWidget.prototype.destroyPetri = function () {

    };

    SimPNWidget.prototype.fireEvent = function (event) {
        const self = this;
        const current = self._webgmePN.states[self._webgmePN.current];
        const link = current.jointNext[event];
        const linkView = link.findView(self._jointPaper);
        linkView.sendToken(joint.V('circle', { r: 10, fill: 'black' }), {duration:500}, function() {
           self._webgmePN.current = current.next[event];
           self._decoratePetri();
        });


    };

    SimPNWidget.prototype.resetPetri = function () {
        this._webgmePN.current = this._webgmePN.init;
        this._decoratePetri();
    };

    SimPNWidget.prototype._decoratePetri = function() {
        const pn = this._webgmePN;
        Object.keys(pn.states).forEach(stateId => {
            pn.states[stateId].joint.attr('body/stroke', '#333333');
        });
        pn.states[pn.current].joint.attr('body/stroke', 'blue');
        pn.setFireableEvents(Object.keys(pn.states[pn.current].next));
    };

    SimPNWidget.prototype._setCurrentState = function(newCurrent) {
        this._webgmePN.current = newCurrent;
        this._decoratePetri();
    };
    

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    SimPNWidget.prototype.destroy = function () {
    };

    SimPNWidget.prototype.onActivate = function () {
        this._logger.debug('SimPNWidget has been activated');
    };

    SimPNWidget.prototype.onDeactivate = function () {
        this._logger.debug('SimPNWidget has been deactivated');
    };

    return SimPNWidget;
});